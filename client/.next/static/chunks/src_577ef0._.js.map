{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hp/OneDrive/Desktop/supplychain/client/src/contexts/web3Context.tsx"],"sourcesContent":["// // src/contexts/Web3Context.tsx\r\n// 'use client'\r\n\r\n// import React, { createContext, useContext, useState, useEffect } from 'react'\r\n// import { useAccount, useConnect, useDisconnect } from 'wagmi'\r\n// import { injected } from 'wagmi/connectors' // Changed this line\r\n// import Web3 from 'web3'\r\n// import { CONTRACT_ABI, CONTRACT_ADDRESS } from '@/lib/web3Config'\r\n\r\n// interface Web3ContextType {\r\n//   connect: () => Promise<void>\r\n//   disconnect: () => void\r\n//   contract: any | null\r\n//   account: string | null\r\n//   isActive: boolean\r\n// }\r\n\r\n// const Web3Context = createContext<Web3ContextType | null>(null)\r\n\r\n// export const Web3Provider = ({ children }: { children: React.ReactNode }) => {\r\n//   const { connect } = useConnect({\r\n//     connector: injected(), // Changed this line\r\n//   })\r\n//   const { disconnect } = useDisconnect()\r\n//   const { address, isConnected } = useAccount()\r\n//   const [contract, setContract] = useState<any | null>(null)\r\n\r\n//   useEffect(() => {\r\n//     if (window.ethereum && address) {\r\n//       const web3 = new Web3(window.ethereum)\r\n//       const newContract = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS)\r\n//       setContract(newContract)\r\n//     }\r\n//   }, [address])\r\n\r\n//   const handleConnect = async () => {\r\n//     try {\r\n//       await connect()\r\n//     } catch (error) {\r\n//       console.error('Error connecting:', error)\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <Web3Context.Provider\r\n//       value={{\r\n//         connect: handleConnect,\r\n//         disconnect,\r\n//         contract,\r\n//         account: address || null,\r\n//         isActive: isConnected,\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </Web3Context.Provider>\r\n//   )\r\n// }\r\n\r\n// export const useWeb3 = () => {\r\n//   const context = useContext(Web3Context)\r\n//   if (!context) {\r\n//     throw new Error('useWeb3 must be used within a Web3Provider')\r\n//   }\r\n//   return context\r\n// }\r\n\r\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport Web3 from 'web3';\r\nimport AgriSupplyChainABI from '../contracts/AgriSupplyChain.json';\r\n\r\ninterface Web3ContextType {\r\n  web3: Web3 | null;\r\n  connect: () => Promise<void>;\r\n  disconnect: () => void;\r\n  account: string | null;\r\n  isActive: boolean;\r\n  contract: any;\r\n  error: string | null;\r\n}\r\n\r\nconst Web3Context = createContext<Web3ContextType | null>(null);\r\n\r\nconst CONTRACT_ADDRESS = 'YOUR_CONTRACT_ADDRESS'; // Replace with actual address\r\n\r\nexport const Web3Provider = ({ children }: { children: ReactNode }) => {\r\n  const [web3, setWeb3] = useState<Web3 | null>(null);\r\n  const [account, setAccount] = useState<string | null>(null);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [contract, setContract] = useState<any>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (window.ethereum) {\r\n      const web3Instance = new Web3(window.ethereum);\r\n      setWeb3(web3Instance);\r\n      \r\n      // Initialize contract\r\n      try {\r\n        const contractInstance = new web3Instance.eth.Contract(\r\n          AgriSupplyChainABI.abi,\r\n          CONTRACT_ADDRESS\r\n        );\r\n        setContract(contractInstance);\r\n      } catch (err) {\r\n        setError('Failed to initialize contract');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const connect = async () => {\r\n    if (!web3) {\r\n      setError('Web3 not initialized');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const accounts = await window.ethereum.request({\r\n        method: 'eth_requestAccounts'\r\n      });\r\n      setAccount(accounts[0]);\r\n      setIsActive(true);\r\n      setError(null);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const disconnect = () => {\r\n    setAccount(null);\r\n    setIsActive(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (window.ethereum) {\r\n      window.ethereum.on('accountsChanged', (accounts: string[]) => {\r\n        setAccount(accounts[0] || null);\r\n      });\r\n\r\n      window.ethereum.on('disconnect', () => {\r\n        disconnect();\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Web3Context.Provider\r\n      value={{\r\n        web3,\r\n        connect,\r\n        disconnect,\r\n        account,\r\n        isActive,\r\n        contract,\r\n        error\r\n      }}\r\n    >\r\n      {children}\r\n    </Web3Context.Provider>\r\n  );\r\n};\r\n\r\nexport const useWeb3 = () => {\r\n  const context = useContext(Web3Context);\r\n  if (!context) {\r\n    throw new Error('useWeb3 must be used within a Web3Provider');\r\n  }\r\n  return context;\r\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hp/OneDrive/Desktop/supplychain/client/src/app/providers.tsx"],"sourcesContent":["// src/app/providers.tsx\r\n\"use client\";\r\n\r\nimport { WagmiConfig, createConfig } from \"wagmi\";\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { http } from \"viem\";\r\nimport { Web3Provider } from \"@/contexts/web3Context\";\r\n\r\n// Create a client\r\nconst queryClient = new QueryClient();\r\n\r\nconst config = createConfig({\r\n  chains: [{\r\n    id: 1337,\r\n    name: \"Ganache\",\r\n    network: \"ganache\",\r\n    nativeCurrency: {\r\n      decimals: 18,\r\n      name: \"Ethereum\",\r\n      symbol: \"ETH\",\r\n    },\r\n    rpcUrls: {\r\n      default: { http: [\"http://127.0.0.1:7545\"] },\r\n      public: { http: [\"http://127.0.0.1:7545\"] }\r\n    }\r\n  }],\r\n  transports: {\r\n    1337: http(\"http://127.0.0.1:7545\")\r\n  }\r\n});\r\n\r\nexport function Providers({ children }: { children: React.ReactNode }) {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <WagmiConfig config={config}>\r\n        <Web3Provider>{children}</Web3Provider>\r\n      </WagmiConfig>\r\n    </QueryClientProvider>\r\n  );\r\n}"],"names":[],"mappings":"AAAA,wBAAwB;;;;;AAMxB;AAFA;AADA;AAEA;AADA;AADA;AAFA;;;;;;AAOA,kBAAkB;AAClB,MAAM,cAAc,IAAI,yPAAA,CAAA,cAAW;AAEnC,MAAM,SAAS,CAAA,GAAA,oXAAA,CAAA,eAAY,AAAD,EAAE;IAC1B,QAAQ;QAAC;YACP,IAAI;YACJ,MAAM;YACN,SAAS;YACT,gBAAgB;gBACd,UAAU;gBACV,MAAM;gBACN,QAAQ;YACV;YACA,SAAS;gBACP,SAAS;oBAAE,MAAM;wBAAC;qBAAwB;gBAAC;gBAC3C,QAAQ;oBAAE,MAAM;wBAAC;qBAAwB;gBAAC;YAC5C;QACF;KAAE;IACF,YAAY;QACV,MAAM,CAAA,GAAA,+TAAA,CAAA,OAAI,AAAD,EAAE;IACb;AACF;AAEO,SAAS,UAAU,EAAE,QAAQ,EAAiC;IACnE,qBACE,8VAAC,yRAAA,CAAA,sBAAmB;QAAC,QAAQ;kBAC3B,cAAA,8VAAC,qZAAA,CAAA,cAAW;YAAC,QAAQ;sBACnB,cAAA,8VAAC,kIAAA,CAAA,eAAY;0BAAE;;;;;;;;;;;;;;;;AAIvB;KARgB"}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}